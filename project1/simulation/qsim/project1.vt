// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/24/2018 15:41:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg M0;
reg M1;
reg M2;
reg N0;
reg N1;
reg N2;
// wires                                               
wire A;
wire B;
wire C;
wire D;
wire E;
wire F;
wire G;
wire H;
wire light1;
wire light2;
wire SD1;
wire SD2;
wire SD3;
wire SD4;

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.clock(clock),
	.D(D),
	.E(E),
	.F(F),
	.G(G),
	.H(H),
	.light1(light1),
	.light2(light2),
	.M0(M0),
	.M1(M1),
	.M2(M2),
	.N0(N0),
	.N1(N1),
	.N2(N2),
	.SD1(SD1),
	.SD2(SD2),
	.SD3(SD3),
	.SD4(SD4)
);
initial 
begin 
#1000000 $finish;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

