module Move
(
	input	clk,
	input[4:0] in,
	output reg[15:0] out=1
);
	wire In;
	wire Reset;
	wire Start;
	wire timing;
	assign In=~(&in);
	assign Reset=in[4]&in[3]&in[2]&in[1]&(~in[0]);
	assign Start=in[4]&in[3]&in[2]&(~in[1])&(~in[0]);
	assign timing=in[4]&in[3]&(~in[2])&(~in[1])&(~in[0]);
	wire[7:0] buffer1;
	mul2 MUL2(buffer[7:0],buffer1);
	wire[7:0] buffer2;
	minus1 MINUS1(out[7:0],buffer2);
	
	reg	[1:0]state;
	parameter S0 = 0, S1 = 1, S2 = 2;
	
	reg[7:0] buffer;
	reg judge=1;

always @ (posedge clk) 
begin
		if (Start==1||Reset==1)
			begin
			state = S0;
			end
		else if(In==0)
			begin
			judge=1;
			end
		else if(In==1&&judge==1&&timing==0)
			begin
			case (state)
				S0:
					begin
						state <= S1;
						judge=0;
						buffer[3:0]=in[3:0];
						buffer[7:4]=out[3:0];
						buffer[15:8]=buffer1;
					end
				S1:
					begin
						state <= S1;
						judge=0;
						if (out[3]==1||out[2]==1||out[1]==1)
							begin
							buffer[3:0]=4'b0000;
							buffer[7:4]=4'b0010;
							buffer[15:8]=buffer1;
							end
						else
							begin
							buffer[3:0]=in[3:0];
							buffer[7:4]=out[3:0];
							buffer[15:8]=buffer1;
							end
					end
				S2:
					begin
						state <= S2;
					end
			endcase
			end
		else if(In==1&&judge==0)
			begin
			a=0;
			case (state)
				S0:
					begin
						state <= S0;
					end
				S1:
					begin
						state <= S1;
					end
				S2:
					begin
						state <= S2;
					end
			endcase
			end
end

always@(state)	
begin
	case (state)
		S0:
			begin
				out<=0;
			end				
		S1:
			begin
				out<=buffer;
			end
		S2:
			begin
				out<=16'b11111111111111111;
			end
	endcase
end



endmodule